
                        BSD Notes by Baloi
               (!! 8 hours coding my project per week)

================================================================================

Mon Jan 26 23:10:09 EST 2015

        I will log everything I did in this file. This entry will be the main 
page and all other entries will be from the newest to the oldest. If my goals
change then the main page will also change. Minimize size of main pages.

        I am creating a development machine from scratch using BSD, OpenBSD in 
this case. I plan to have a good configuration for vim, Python and C development 
for my needs. I need to be able to run my scheduling scripts from this machine. 
I need internet from LAN at least and from wifi optimally. It would be nice to 
have a nice working Gnome window manager if ever. Or I will just use tmux as my 
window manager.

        Needed: 
        * vim
        * good vim configuration
        * letter count in vim
        * syntax highlighting in vim
        * git?
        * internet connection           - fw_update and ifconfig solved this
        * file transfer 

        If not, I will write all my tools from scratch in C and in shell script. 
        Maybe this is what I will do.
        * No internet by default.
        * No emails
        * No browser
        * Just vim 
        * STUDY SOURCECODE
        * Write my own tools from scratch, even command line tools.
        * Try to use only what is in the default install plus vim and git!

================================================================================

Tue Mar 15 06:49:00 EDT 2016

    I am sold: totally going to shop for a Macbook air soon.

FROM freethink.txt:

Time to code:
  Best would be early in the morning.

Best machine for coding.
  (mac)

What can I say? Typing in my Macbook is
  FREAKING AWESOME!!
  I would not have any other machine at
    this point to type on...
  Nor do I have one comparable...

Why is the Macbook awesome:
  Still has some battery. (2-3 hours)
  Keyboard rocks
  Very good "sleep" functionality.
  Just works.

================================================================================

Tue Mar 15 06:22:03 EDT 2016
(Taken from my journal entry)

    As I thought, I can program most productively in my Macbook. Planning to buy
    either a Macbook 11" or an HP Elitebook 12". Elitebook has bigger memory and
    costs about $300, Macbook Air a minimum of $460. Elitebook 12", Macbook Air
    11". Macbook has good keyboard, Elitebook might have good keyboard.
    Macbook has OSX, Elitebook has Windows (I would have to install linux). 
    Macbook should have good battery life, Elitebook about 3 hours. Macbook has
    good sleep function, Elitebook depends on linux. Macbook will be easy to 
    connect to network and has good PDF readers. Elitebook...

    Macbook Air 11", wins even with price. I better buy a good almost like new
    or new one (OLD version or newest).

    Macbook Air 11" wins!

    John Carmack when Id was in full scale development and when they just 
    started having money, once went out on a cold day, drove his car to for a
    bit and came back with a Next Cube. It was his investment. Back then the
    Next Cube cost about $10,000. That was about 20 years ago. John Carmack
    coded the game Wolfenstein and Tim Berners Lee used a Next Computer to 
    "build" the internet. Cool STUFF! Macbook Air wins in my game.
    
    Now to look for stickers for my Mac.

================================================================================

Tue Feb 23 21:47:47 EST 2016

http://metal.mit.edu/brief-history-metal:

Metal notes, chronological:
> Black Sabbath (started it, workman like)
> Deep Purple   (faster virtouosity)
> Judas Priest, Hellbent or Leather
> Iron Maiden , Run to the Hills
  Motorhead, Iron Fish
> Metallica

================================================================================

Sun Feb 21 09:25:19 EST 2016
    
    Using zeromq security:

    http://hintjens.com/blog:49

    The scalable C language:

    https://hintjens.gitbooks.io/scalable-c/content/chapter3.html
    

================================================================================

Sun Feb 14 09:20:55 EST 2016

    Python's killer apps for blogging:

    http://tech.marksblogg.com/website-cdn-with-pelican-and-s3cmd.html

================================================================================

Thu Feb 11 18:45:19 EST 2016

    Using text files...
    http://lifehacker.com/ten-clever-uses-for-plain-text-files-that-can-increase-1662774267

================================================================================

Thu Feb 11 06:58:34 EST 2016

    This is a nice little source of tips about small things someone learned
    across a variety of languages and tech while working at Hashrocket:

    https://github.com/jbranchaud/til

    Then how to code go to convert "curl" commands to go:

    https://mholt.github.io/curl-to-go/

================================================================================

Tue Feb  9 21:35:15 EST 2016

    The tools, the language and the workflow.

    I think that when programming, it is not only the language itself that makes
    it fun and productive but also the tools available and the workflow... I 
    like tools that are simple and that I know how to use. I do not like to 
    install a library/plugin and then later on it does not run (like the
    nightmare I had with Ruby gems and versions). I did not know why there had
    to be so many dependencies and then later on they were broken.

    Anyway, the workflow. I will describe mine for this short snippet that did 
    not work (after I added the scaffolding code):

        #include <time.h> 
        char *now; 
        char *date; 
        /* original snippet starts here */
        time(&now);
        strcpy(date, ctime(&now));
        date[strlen(date)-1] = '\0';
        /* original snippet ends here */

    So the workflow:
    1. save file after editing (using vim ":w")
    2. Ctrl-z to get out of vim temporarily
    3. gcc -Wall the_art.c -o the_art
    4. ./the_art (runs the program)
    5. fg
    6. back to 1

    Steps 3 and 4 I do not have to type, just use the "up" arrow for command
    history.

    It had bugs so did not compile yet. Fixed bugs. I ran then had segmentation
    fault. I decided to use Valgrind to be safe. Oh, my Mac does not have 
    valgrind. Easy, I have a raspberry pi always on with gcc, valgrind, python
    and some other good stuff (like vi with tags to C library code).

    scp *.c pi@192.168.0.xx://home/pi/projects/c_snippets

    Used steps 1 - 6 but changed 3 and 4 to use valgrind as follows:

    3. gcc -Wall -g the_art.c -o the_art
    4. valgrind ./the_art

    Kept doing the same routine, until I found a solution.
    It takes just a couple of seconds to save(":w"), get out of vim("Ctrl-z")
    and compile (2-3 up arrows). 

    
================================================================================

Tue Feb  9 21:26:52 EST 2016

    Learning again that C is unreasonably good. Stable, simple, fast, uncompro-
    mising. This guy thinks so too:

    http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html

    I currently reading "The Practice of Programming" by Kernigan and Pike, and
    find that their are a few bits of of essential tips for programmers and 
    especially for C programmers. Going through some code about commenting your
    code, I found a snippet that resulted in a segmentation fault. It compiled
    but the segmentation fault happened when I ran the code (more aoubt this 
    later). But I was able to hack a bit and experimented. Used Valgrind and
    hacking away and read a little bit of the man pages and whalla! It ran...

================================================================================

Sun Feb  7 13:09:12 EST 2016

    Found a way to read whole file in C in a better way using dynamic alloc-
    ation here:

    /Users/baloi/projects/c_snippets
    (Now implemented in ~/projects/c_snippets/file_open.c 

    Currently also reading:
    "The Practice of Programming" by Brian Kernigan and Rob Pike
    "The Art of Unix Programming" by Eric Raymond

    TPOP has good idioms for C and other languages and a very good regex matcher
    in a few lines of C.

    TAOUP has some stuff about the Unix approach, good program design, etc.

    Not even a third of the way through both books and already it is giving me
    much info, enlightenment...

================================================================================

Sat Feb  6 15:28:12 EST 2016
    
    C programming, improving, see Leif Walsh's answer:

    https://www.quora.com/What-is-the-right-way-to-improve-my-practical-programming-in-c

    Definitely someone to follow, coding-wise. A C programmer by trade...
    
    Code reading Spinellis:

    http://www.spinellis.gr/codereading/spinellisch02.pdf

================================================================================

Thu Feb  4 19:38:56 EST 2016
    This might just be what I am looking for...

    Maru is a desktop OS on an Android phone. Switch between phone and Desktop.
    Connect phone to HDMI and connect Bluetooth keyboard.

    http://maruos.com/#/

    And as a side note, 20 things nice to have:

    http://www.amazon.com/b/ref=sl_gw_topshov_twenty/ref=br_isw_strs-3?_encoding=UTF8&ie=UTF8&node=13630385011&pf_rd_m=ATVPDKIKX0DER&pf_rd_s=desktop-top&pf_rd_r=02TKBP82ME8RMHSJJFY3&pf_rd_t=36701&pf_rd_p=2402280002&pf_rd_i=desktop

================================================================================

Thu Feb  4 06:46:06 EST 2016

    fread in C when reading binary files in unix is different when using it in
    Windows. I opened the file using:


        conn->file = fopen(filename, "r+");

    This link 
    (http://stackoverflow.com/questions/11717120/unexpected-return-value-from-fread)
    suggests that fopen be used with "rb" flag

        conn->file = fopen(filename, "rb+");

    I will give it a try later, but I am also thinking about using mingw on
    windows. I just tried TCC last night.

    My little side project is a database that uses structs and write the structs
    (and read them) in binary format.

    Or I may have to read and write to text files instead, as this may work for
    my other little project which will parse MDS lists and determine which were
    done and not done - this tool I need badly.

================================================================================

Sun Jan 31 22:47:56 EST 2016

    This weekend, I was not able to code my planned dayprog planner database,
    but I had fun with pcap capture library.

    Had pcap installed and running on my raspberry pi by Saturday morning. Had
    it running in OSX later on. Followed the tutorial in: 
    http://www.tcpdump.org/pcap.html

    Took it slow. Bit by bit. First compiled with #include <pcap.h>. Then 
    slowly added functionality. Had visitors saturday afternoon to night so I
    had a coding stop for a bit but coded again a little more Saturday night.

    Saturday morning more done, afternoon for 2 hours and then finished the
    whole thing at 10:30 PM tonight after my run.

    Got it done!

    From now on, a tutorial should be done in due time. I will not hurry at all
    as I will not learn much that way. It was about a 300 + line program with
    lots of comments for the functions used. Coded in C. Followed the tutorial,
    but I think I still have to revisit this and code more my own.

    It had a callback function which called printing functions in hex and ascii.
    
    Totally rocks!

================================================================================

Sun Jan 31 22:35:49 EST 2016

    Packet capture code using libpcap is working. Nice! Learning more C idioms.
    The little sniffer program was written in good style. Uses pointer offset
    locations. 
    
    Has callback function. Cool!

    Code is in ~/projects/packet/sniff.c

    The function:
    
    int pcap_loop(pcap_t *p, int cnt, pcap_handler callback, u_char *user)

    this is the key to the callback mechanism. So each time a packet is read,
    the callback function "callback" is called with arguments.

================================================================================

Sun Jan 31 15:00:38 EST 2016

    Studying code by typing it in and modifying (one way to learn, a good one).

    I have been coding the sniffer in C for a couple of hours now. About 250
    lines with comments explaining some parts of the program. So it could be
    about 200 lines. I had also some code in there from past pcap library use
    practice snippets. So it could be close to 150 lines of code. 

    Now, this is just trying to copy and get to understand the sniffer code in
    C. 

    Method:
    1. copy a small part of the code (about 1 to 5 lines only)
    2. compile/run
    3. understand the code

    4. edit code if needed to fit my liking

    This will be my defacto standard of studying C code from now on...

================================================================================

Sun Jan 31 10:22:24 EST 2016
    I have to read some of these books:

    https://sivers.org/book

================================================================================

Sat Jan 30 11:46:44 EST 2016

    Installing pcap from tcpdump site for packet stuff:

    > Downloaded pcap:
    $ http://www.tcpdump.org/release/libpcap-1.7.4.tar.gz

    > Unpack
    $ tar -zxvf libpcap-1.7.4.tar.gz

    > apt-get update
    $ sudo apt-get update

    > install flex
    $ sudo apt-get install flex

    > install yacc through bison
    $ sudo apt-get install bison

    > configure, make, make install
    $ ./configure

    $ make

    $ sudo make install


================================================================================

Fri Jan 29 06:47:35 EST 2016

    Gopher academy has a few bit of short projects to tinker with like, a go &
    JSON database, parser and lexer. It seems one way to start... I have done
    worse in the past so why not?

    https://blog.gopheracademy.com/


================================================================================

Fri Jan 29 06:39:50 EST 2016

    Having more time, less money. The upside to more time though is you have
    time to be more observant. Think more. Live more. Code more. Write more.

================================================================================

Fri Jan 29 06:03:36 EST 2016

    Taken from my journal with the above date and time:

    I should be writing more on my journal. I have been writing a bit on my BSD
    notes though. I think is it good to look at my git logs to know home much
    I have been "working". Right now, notes and some projects have been tracked,
    but my "projects folder has not been....". Maybe I should log all the 
    "creative" work I have done and the "freewriting" too. Hmm. just a thought.

    Anyway, looking into doing "go" or "c". Learning to have a rudimentary 
    database in C. Porting to go or not? Go has encryption, go routines, and
    networking with it. I have also found a bare tcp server an client sample.
    Trying to figure out patterns for file access. Maybe I should look into
    the simple go database implementation with JSON serialization sample and
    then just change it to the c-style implementation ..... Hmmm. Time to look
    into some code.

    I am trying out small project samples from other people. Might try to read
    on medium sized samples later on... But I feel I still have the need to 
    be grounded on the small snippets of code which I do enjoy doing. I shall
    do this and maybe bigger projects later on. 0MQ was good for a while then
    things got complex. I'll go back to 0mq and nanomsg later on when I need
    a networking stack for my database maybe. Maybe that is....


================================================================================

Wed Jan 27 06:47:22 EST 2016

    Connecting programs together with sound?
    http://joearms.github.io/2016/01/28/A-Badass-Way-To-Connect-Programs-Together.html

    This is from the speaker of this video, which is also cool (the mess we are
    in):
    https://www.youtube.com/watch?v=lKXe3HUG2l4
================================================================================

Sat Jan 23 07:25:55 EST 2016

    Using valgrind:
    
    Compile your program with the -g option:

    $ gcc -Wall -g your_program.c -o your_program

    Then let it run with valgrind:

    $ valgrind --track-origins=yes ./your_program

================================================================================

Thu Jan 21 22:07:33 EST 2016
    
    $ ./configure
    $ make
    $ make check
    $ sudo make install
    $ sudo ldconfig

    Trying nanomsg...

    Swap #include <libc.h> with:

    #include <unistd.h>
    #include <string.h>
    #include <pthread.h>

    And compiling nanomsg programe like nano_pipe.c for example:

    $ gcc nano_pipe.c /usr/local/lib/libnanomsg.a -o nano_pipe
   
    But that was static linking. better dynamic:

    $ gcc nano_pipe.c -L/usr/local/lib/ -lnanomsg -o nano_pipe 
    

================================================================================

Mon Jan 18 22:59:07 EST 2016

    Scalable C: https://hintjens.gitbooks.io/scalable-c/content/chapter2.html

    This looks like a very promising piece of work. Includes C style and
    good programming practices....

================================================================================

Sun Jan 17 14:03:03 EST 2016

    ZeroMQ is really pulling me into programming programs that I find really
    cool. Messaging across machines, client and server, publish and subscribe.
    These are what I like. Coded in C. Even the ZeroMQ style of coding really
    makes sense. Instead of using function pointers and structs to have some-
    thing like classlike behaviour, 0mq just uses naming conventions and passes
    pointers to structs, like:

    void *context = zmq_ctx_new();
    void *requester = zmq_socket(context, ZMQ_REQ);
    // here's a sample:
    zmq_connect(requester, "tcp://localhost:5555");
    // another:
    char buffer[10];
    zmq_send(requester, "Hello", 5, 0);
    zmq_recv(requester, buffer, 10, 0);
    zmq_close(requester);
    zmq_ctx_destroy(context);
    
    How cool is that!

    After unsuccessfully trying to install zeromq and having a lot of libsodium
    library not found problems when building zeromq, I almost gave up on it, 
    until I just did:

    $ brew install zeromq

    ==> Downloading http://download.zeromq.org/zeromq-4.1.2.tar.gz
    ######################################################################## 100.0%
    ==> ./configure --prefix=/usr/local/Cellar/zeromq/4.1.2 --without-libsodium
    ==> make
    ==> make install
    /usr/local/Cellar/zeromq/4.1.2: 63 files, 3.3M, built in 107 seconds

    Found it from here: 
    http://cbcg.net/blog/2011/07/30/getting-zeromq-and-jzmq-running-on-mac-os-x/

    Cloned my distributed applications testbed into ~/projects/distributed and
    compiled like this:

    $ gcc hello_client.c -L/usr/local/Cellar/zeromq/4.1.2/lib/ -lzmq -o hello_client

    $ ls /usr/local/Cellar/zeromq/4.1.2/lib/

    libzmq.5.dylib
    libzmq.a
    libzmq.dylib
    pkgconfig

    I guess -L prefix points to the "lib/" folder which contains libzmq.a
    which is used by the -l prefix of gcc.

    Rock on...
================================================================================

Sun Jan 17 10:01:29 EST 2016

    Coded before breakfast and a little bit more after breakfast trying out
    zero mq. This is the sort of programming I like! Sockets, client-server,
    publish - subscribe. Makes the blood go uhm.

    weather_updater.c is a program that just publishes mock weather data. I 
    tried modifying py_hags/tcp_client.py to listen to port 5556 where it 
    publishes, but got "garbled" data. Telnet sort of does the same thing:

    $ telnet 192.168.0.11 5556 > response.txt

    Tweaked distributed/src/weather_client.c to print out every single 
    weather data sent as it is received.

    All working on my raspberry pi.

    Uploaded to git.

================================================================================

Sun Jan 17 07:28:21 EST 2016

    Hello 0mq !

    Built libsodium and zero mq:

    (https://hintjens.gitbooks.io/scalable-c/content/chapter1.html)

    cd $HOME/projects

    # Install libsodium
    git clone https://github.com/jedisct1/libsodium
    cd libsodium
    ./autogen.sh && ./configure && make -j 4
    make install
    cd ..

    # Install libzmq
    git clone https://github.com/zeromq/libzmq
    cd libzmq
    ./autogen.sh && ./configure && make -j 4
    make install
    cd ..

    # Build CZMQ again...
    cd czmq
    ./configure && make -j 4
    make install
    cd ..

    Compiled my first zero mq program:

    $ gcc -Wall hello.c -o hello -L/usr/local/lib -lzmq 

    $ ./hello

    hello: error while loading shared libraries: libzmq.so.5: 
    cannot open shared object file: No such file or directory

    Found a solution here: 

    http://stackoverflow.com/questions/17275875/zmq-libzmq-so-3-cannot-open-shared-object-file-no-such-file-or-directory

    $ sudo ldconfig

    This will update the system library cache. I had already successfully built
    libzmq and libsodium.

    It took a couple of hours for the total compile/make times, but it is worth
    it to have zero mq installed in my raspberry pi! On my Mac it has not
    successfully been built though due to libzmq build cannot find libsodium...
    Maybe another time in Mac. Pi for now!

================================================================================

Sat Jan 16 16:20:53 EST 2016

    Scalable C - Writing large-scale Distributed C

    https://hintjens.gitbooks.io/scalable-c/content/index.html

================================================================================

Tue Jan 12 20:56:03 EST 2016
    Listening to Hacking The Overmind Radio in Pandora...

    Uses of netcat "nc", a very powerful tool indeed:

    http://www.catonmat.net/blog/unix-utilities-netcat/

    ---------------------------------------------------

    Setting bash to 'vi' mode: (http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/)

    $ set -o vi

    To get back to emacs mode:

    $ set -o emacs

================================================================================

Sat Jan  9 17:23:28 EST 2016

    Learning hard stuff

    https://medium.com/learning-new-stuff/a-simple-technique-to-learn-hard-stuff-ffaa7879bf7c#.hmo5lybld

    1. Use it before you know it. Maybe a video tutorial

       a. Build from day one
       b. Gives you sample code
       c. Discover your unknown unknowns

    2. Address your struggles

    3. Build stuff

================================================================================

Wed Jan  6 22:53:47 EST 2016
    Taken from  
    Compiling SDL with gcc on Mac (c code):
    
    get the linking flags:

    $ sdl-config --cflags --libs

    Which outputs:
    -I/opt/local/include/SDL -D_GNU_SOURCE=1 -D_THREAD_SAFE -L/opt/local/lib 
    -lSDLmain -lSDL -Wl,-framework,Cocoa 

    So do this to compile:

    $ gcc -Wall -c main.c -o main.o
    $ gcc -I/opt/local/include/SDL -D_GNU_SOURCE=1 -D_THREAD_SAFE 
      -L/opt/local/lib -lSDLmain -lSDL -Wl,-framework,Cocoa  main.o -o c_only

    
    Answer was found in:

    http://stackoverflow.com/questions/4019892/compiling-sdl-on-a-mac

    Raycasting example taken from:

    https://www.youtube.com/watch?v=HQYsFshbkYw
    http://bisqwit.iki.fi/jutut/kuvat/programming_examples/portalrendering.html

    Now works!!!

================================================================================

Tue Dec 29 21:00:34 EST 2015
    
    Inspirational technical books that are not technical

    http://blog.fogus.me/2015/07/07/inspirational-technical-books-that-are-not-technical/

================================================================================

Mon Dec 28 20:14:12 EST 2015

    Codewalk: Share Memory By Communicating

    https://golang.org/doc/codewalk/sharemem/

================================================================================

Fri Dec 25 07:30:05 EST 2015

    Handmade quake:

    http://philipbuuck.com/announcing-handmade-quake

    Modding doom:

    http://eev.ee/blog/2015/12/19/you-should-make-a-doom-level-part-1/

================================================================================

Thu Dec 24 22:46:56 EST 2015

    Detecting wireless cameras:

    https://julianoliver.com/output/log_2015-12-18_14-39

================================================================================

Sat Dec 19 08:31:25 EST 2015

    flow based programming:

    https://groups.google.com/forum/#!msg/flow-based-programming/iaKhbABJ9fw/XlrMf-dnBgAJ

================================================================================

Sun Dec 13 08:24:28 EST 2015

    "Maximizing" a tmux pane:

    > Ctrl-B z

================================================================================

Thu Dec 10 19:39:06 EST 2015

    Vim plugins to try:

    http://adamdelong.com/5-vim-plugins-helped-switch-sublime/

================================================================================

Wed Dec  9 22:33:37 EST 2015

    Try using these Python libraries:

    "dateutil" and "requests"

================================================================================

Wed Dec  9 22:06:54 EST 2015

    Creating Raspberry pi with Kali linux for pentest

    http://lifehacker.com/how-to-build-a-portable-hacking-station-with-a-raspberr-1739297918

    Bobby tables for preventing SQL injection:

    http://bobby-tables.com/

================================================================================

Sat Nov 21 09:01:52 EST 2015
    
        This is a talk from Golang conference UK about security which I should
        still review:

            https://www.youtube.com/watch?v=ViBRx-F4Z2U&list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd

        This is linked from a link from: 

            https://blog.golang.org/

        The blog itself is a very good and is good morning material.

        Anyway, the security talk. The resource person, Eleanor McHugh has a
        book, "A Go Developer's Notebook" which is a great 
        study-by-hacking-snippets-of-code and putting in in my 
        ~/my_go/src/snippets, running, modifying and readig the thankfully short
        but very enlightening explanations from a hacker's collection of code
        snippets used in her talks through the years. The book can be bought
        from $6.00 to $24.00 at https://leanpub.com/GoNotebook. Great!

================================================================================

Wed Nov 18 06:58:26 EST 2015

    Try this out in go:

    http://libmill.org/tutorial.html

    This seems like a good equivalent in go:

    http://loige.co/simple-echo-server-written-in-go-dockerized/

    Tested this go app with netcat and echo:

    $ echo "Hello server" | nc localhost 3333  


================================================================================

Wed Nov 11 21:52:20 EST 2015

    Just playing with dc application right now. Using structs in go. Seems ok.

================================================================================

Sun Nov  8 21:59:15 EST 2015

    To make install go packages:

    $ go get github.com/gopackage

    But we have to set $GOPATH in .profile (for raspberry pi)

    GOPATH=$HOME/my_go

    my_go would have src/, bin/ and pkg/

================================================================================

Sun Nov  8 20:41:07 EST 2015
 
    Using nmap to find ssh ports:

    $ nmap -p 22 --open -sV 192.168.0.0/24

    -p      = port (in this case 22)
    --open  = suppress output for clients that are not listening
    -sV     = display the versio string reported by the scanned server
    192.168.0.0/24  = target network (/24 specifies a subnet of
                      255.255.255.0

================================================================================

Sat Nov  7 06:58:04 EST 2015

    Update to GO in raspberry pi. Running as per installation instructions
    below! I just needed to make "sudo apt-get update" work. Then installed
    vim. Then set go/bin to be in the path. Sweet.

    Using tar and scp to get some C files into raspberry for study:

    Join files:
    $ tar -cvf joined.tar file1 file2

    Copy to pi:
    $ scp joined.tar pi@192.343.0.23://home/pi

    Unjoin:
    $ tar -xvf joined.tar

================================================================================

Fri Nov  6 06:45:45 EST 2015

    Code reading simple db to try to implement my own database and calc for c
    hashmaps are found in ~/study ...

================================================================================

Thu Nov  5 19:30:44 EST 2015

    Setting up raspberry pi from scratch:

    Hold "Shift" key during startup and install raspbian.

    Get wifi going by editing /etc/wpa_supplicant/wpa_supplicant.conf

    network={
        ssid="The SSID of router"
        psk="Your wifi password"
    }

    INSTALLING GO: 
    (from http://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi)

    Install prerequisites first:

    % sudo apt-get install -y mercurial gcc libc6-dev

    Cloning the source:

    % hg clone -u default https://code.google.com/p/go $HOME/go

    BUILD GO

    % cd $HOME/go
    % ./all.bash

    DID NOT RUN YET AS sudo apt-get update is not working right now in my pi.

================================================================================

Wed Nov  4 06:39:53 EST 2015
    
    My Redis-Martini Go sample is working at:
    // from https://gist.github.com/peterhellberg/9450839

    ~/go/src/redisko

    Used curl to test:
    
    $ curl http://127.0.0.1:3000/set/mykey?value=anyvalue

================================================================================

Mon Nov  2 12:47:50 EST 2015

    Trying out the chat example from :
    https://www.compose.io/articles/redis-go-and-how-to-build-a-chat-application/

    Get libraries:
    $ go get github.com/soveran/redisurl
    $ go get github.com/garyburd/redigo/redis

    Code is in:
    https://github.com/compose-ex/goredchat/blob/master/main.go

    My code is in ~/go/src/redisko/main.go

    Sample of redis (redigo) and martini:

    https://gist.github.com/peterhellberg/9450839

    Found redis.DialDefaultServer() from here:

    https://github.com/garyburd/redigo/blob/master/redis/conn_test.go

    DialDefaultServer() did not work.
    I used redis-url instead:

    https://github.com/soveran/redisurl/blob/master/redisurl.go

    redisurl.ConnectToURL("redis://127.0.0.1:6379")

================================================================================

Mon Nov  2 12:19:22 EST 2015

    Redis DB is getting me excited. Downloaded with wget:

    $ wget http://download.redis.io/releases/redis-2.8.23.tar.gz

    Downloaded an older version as I have an older Mac and OSX.

    $ tar xzf redis-....

    $ cd redis...

    $ make

    $ cd src

    Ran server:

    $ ./redis_server

    Ran client:

    $ ./redis_cli

    After some tinkering, I shutdown both client and server and my work was
    saved. This seems to be a good alternative to sqlite for my needs. It has
    lists, hashes, sets.

    The append-only file is an alternative, fully-durable strategy for Redis. 
    Edit redis.conf (usually in /etc/redis/redis.conf) if redis is installed.

    appendonly yes

    A chat application in go and redis:

    Source:
    https://github.com/compose-ex/goredchat/blob/master/main.go

    Article:
    https://www.compose.io/articles/redis-go-and-how-to-build-a-chat-application/

================================================================================

Sun Nov  1 07:31:56 EST 2015

    I read somewhere that learning programming should not be just from tutorials
    in the net. But as far as learning Go Martini web, this is a really sweet
    one:

    http://0value.com/build-a-restful-API-with-Martini

================================================================================

Thu Oct 29 19:40:55 EDT 2015

    Trying out martini go with sqlite 3.

    $ go get github.com/mattn/go-sqlite3

================================================================================

Tue Oct 27 21:40:33 EDT 2015

    Install Martini package (a go package for web development).

    $ go get github.com/go-martini/martini

================================================================================

Sat Oct  3 15:19:30 EDT 2015

    Finally solved the "undefined" errors on go. 

    $ go build -o {name}

    I had to re-install go with brew:

    $ brew install git go

    I ended up with a colorized git though.

    I do not care what happened to other installations. My golang installation
    runs and my git is colorized. Cool!

    Had to set $GOROOT(/usr/local/Cellar/go/1.4.2/libexec) and $GOPATH 
    (/Users/me/go).

    Calling "go run" is good for only one file, use "go build" for multiple
    files. Easier than building in C.

================================================================================

Sun Oct  4 07:31:47 EDT 2015
    To make go and vim environment rock, I enabled pathogen in vim, by adding
    "pathogen infect()" something in .vim/vimrc. It only works in my account
    and not root, but at this time I just want to code go in a non root account
    anyway so it works. Got the vim-go pathogen by following something from
    here: http://blog.gopheracademy.com/vimgo-development-environment/ . 
    Actually only these 2 lines:

    $ cd ~/.vim/bundle
    $ git clone https://github.com/fatih/vim-go.git
    
    I had to create "bundle" directory and another one. 

    Vim and go at work. 

    One caveat: everytime I save in vim, it autoformats which is great, but
    the vim "undo" feature goes only to the last save. So what I do now is
    to use git to commit (not even push to a server) and then I can do all
    my rollbacks from there. The good thing with git is that every commit
    will have a description. I can plan better and get to learn to use git
    more effectively now.

================================================================================

Sat Oct  3 14:27:08 EDT 2015
    
    Undoing stuff with git:

    https://github.com/blog/2019-how-to-undo-almost-anything-with-git

================================================================================

Sat Oct  3 13:37:04 EDT 2015
    
    After installing go on Mac with:
    $ brew install git go

    As of go 1.2, a valid GOPATH is required to use the `go get` command:
      https://golang.org/doc/code.html#GOPATH

    You may wish to add the GOROOT-based install location to your PATH:
      export PATH=$PATH:/usr/local/opt/go/libexec/bin

    ==> Summary
    /usr/local/Cellar/go/1.4.2: 4566 files, 155M, built in 3.8 minutes

================================================================================

Tue Sep 29 07:10:57 EDT 2015

    Taken from http://etodd.io/2015/09/28/one-weird-trick-better-code/:

    In summary, design data structures to match your specific problem. Don't 
    shoehorn a single concept into a bunch of separate, encapsulated objects.

    Next, write functions that leave the smallest possible footprint on that 
    data. If possible, write pure stateless functions.  

    That's the trick.

================================================================================

Sat Sep 26 08:55:57 EDT 2015

    Lesson learned: When studying from a book with code, code only from one
    place and have bookmarks only on one place of where your reading progress
    is. Not being able to keep track wanes interest. Keep track of progress
    so you can go on. This is what I will do now. Forgive myself for being
    sidetracked, but get the hell started again. Go on my OpenBSD is not so
    cool as I need root right now. I do not have the time to figure out how
    to configure it correctly so to hell with it. Start reading and coding. I
    will do JUST THAT! I will enjoy  the book now please. Dump the too techie
    stuff. In this case configuration is killing my learning. So just get rid
    of configuration problems and just code away. 

================================================================================

Mon Sep 14 21:50:47 EDT 2015
    
    Bought the book Go Programming Blueprints. I decided to just dive right in
    instead of getting stuck in internet tutorials or buying a beginner go book
    which can be very boring indeed. This book was a good choice. Dive right in.
    The author is also versed in TDD and that kind of stuff. "Modern" methodolo-
    gy, fun projects, practice by copying and tinkering with real code. Evolving
    small programs to be bigger and more functions. Understanding from the 
    explanation provided in the book.

    The only other resource I will use is the golang book in google which has
    small snippets...

    Installing go in OpenBSD 5.6:

        # export PKG_PATH=ftp://ftp.openbsd.org/pub/OpenBSD/5.6/packages/i386/
        # pkg_add 

    Installed go 1.3...

        $ go version

    This got a lot of errors.

    Can be solved with:

        $ export GOPATH=/home/go
        $ export PATH=$PATH:$GOPATH/bin
        $ ulimit -n 512
        $ ulimit -p 512
        $ ulimit -d 2036792

================================================================================

Tue Sep  8 06:15:17 EDT 2015

    Started clojure programming. Read some of this tutorial to start:

    https://aphyr.com/posts/301-clojure-from-the-ground-up-first-principles

================================================================================

Tue Sep  1 22:40:51 EDT 2015

    Will code now...

Tue Sep  1 23:17:08 EDT 2015

    I did about 2 and 1/2 10 minute coding sessions with 10 minutes rest in
    between. Got one little program running though. Will read and program
    file open and writing tomorrow.

================================================================================

Sun Aug  9 07:11:20 EDT 2015

    I read that working fast matters as the faster you finish something or you 
    expect to finish something, the less a barrier it will be to get it started
    and the less afraid you are to do it. So I created a directory to my current
    work to prevent having to try to remember what I was working on and then
    just get it done!

    Created a link to current work on C which is version 0.01 of git.

        $ ln -s study/git_study/git-0.01-src/ current_work

    To remove the link I could just do:

        $ rm current_work

    To go to the current work just:

        $ cd current_work



================================================================================

Fri Aug  7 14:32:47 EDT 2015

    I have been thinking a lot during the last shift of my main job of 3. I am
    already doing 3 jobs. I do not earn enough to be really financially free as
    although I earn more, I have a bit more expenses to cover to be able to do
    3 jobs like: 2 cars now instead of 1 and I had to buy a relatively newer van
    to replace our old van for the family, but this is an investment in my
    family's happiness. The second car will just let me go to other jobs or 
    appointments. It also gives me more freedom. Thus, both cars are an invest-
    ment. Two new phones and upgraded Julia's. So we now have 3 phones with all
    unlimited text and messaging. Also all needed to be able to communicate more
    with family and for working relations, finding jobs, Kenken's phone to keep
    his job and got him a little more freedom, which he needs and deserves. All
    again pluses.

    I figured out that once these all get paid up then I will have some wiggle
    room to help out the kids for school. I will also soon have to increase
    savings.

    With all this figured out, I then decided. Time to get started with my 
    dream of getting a tech/learning/programming group started. Sir Brizo will
    be a good resource. That is why I bought a cana kit raspberry pi. I will
    ship it on Saturday to Bohol and get this thing started.

    Lastly. I am getting a rhythm of getting my "paperwork" done. Managing more.
    Time to make a pact with myself. First 30 minutes and last 30 minutes of the
    day should be spent on writing and coding.

================================================================================

Sun Jun 28 18:12:58 EDT 2015

    Now getting the error:

        warning: incompatible implicit declaration of built-in function 'strpy'

    This also includes sprintf, strlen.....

    Solved this by adding #include <string.h> in cache.h.

    Now the whole thing compiles fine excluding a warning by the compiler to use
    snprintf() instead of sprintf() or strlcpy() instead of strcpy(). This might
    be something of an exercise next time, but the thing compiles. It's alive!

================================================================================



Sun Jun 28 15:43:32 EDT 2015

    Copying git-1.8.1-rc2 from my Mac to the BSD machine:

    $ scp user@192.168.0.15://User/user/user/working/git_tinker/* .

    Might as well start somewhere.

    Whoa! Able to compile git source 0.01 by including the proper libraries in
    Makefile. It has compiled successfully in my OpenBSD machine!

    In my Makefile:

    LIBS= -lssl -lcrypto -lz

    program_name: program_name.o
	    $(CC) $(CFLAGS) -o program_name program_name.o $(LIBS)


    -lcrypto will include SHA and other cryptographic stuff it seems
    -lz will include zlib.

    Notice that $(LIBS) is placed at the end of the line (CC) line.


    Found a resource in www.zlib.net/zlib_howto.html and will run the sample
    program using "deflate()" and "inflate()" methods which gave the error:
    
    undefined reference to "inflate"

================================================================================

Tue Jun 23 20:17:43 EDT 2015

    Working on my Mac for a couple of days now for coding and recording entries.
    My BSD machine seems clunky nowadays especially as I had even more trouble
    trying to compile the git source code (version 0.01) on it. I might as well
    just program in Mac.

    The reason I am coding is an article from news.ycombinator.com about Elixir.
    I need to give this a try. And then work on the git source code and other
    projects.

    Installing Elixir:
    
    $ brew update
    $ brew install elixir

    ... now it is installing libtool, makedepend, openssl, libtiff, wxmac, jpeg,
    libpng, .... hung up...

    Unable to install Elixir. Back to C and Go coding. This sort of sucks.


================================================================================

Sun Jun  7 09:06:21 EDT 2015

    One week since the end of my Eddy VNA training ended... 7 weeks of hardcore
    schedules. Survived.

    April 17, 2015 - June 7, 2015. About 2 months of programming and journaling
    hiatus. A little bit of a rest. What I have been doing: 3 jobs, working out
    in the morning and tennis. I have to get into 5 minute journaling everyday
    and 5 minute coding also. Read 5 minutes. That makes 15 minutes of my day
    to programming and journaling. Sounds good enough. I can concentrate for 5
    minutes at a time. It will not eat all my day. 5 minute programmer. That is
    what I will be for now......

    FOLLOW UP:
    5 minutes journaling is great - just enough for quick entries
    5 minutes coding - if reading a bit then two 5-minute bursts works
            ( has to be short code though )
    5 minute reading......

    Well, that is it for now.
================================================================================

Fri Apr 17 21:10:51 EDT 2015
    
    > Code git origins
    > Code some cryptography (BSD libs used)
    > Code:
        - C implementation of encrypted database (simple)
        - Python implementation of "user interface" which will still be text
          (have to install python in BSD), Python simplifies coding of the
          user interface.

================================================================================

Fri Apr 17 21:06:46 EDT 2015

    One week of grueling 6/6:30 AM to 7/8 PM work. 6 - 7 at the nursing home and
    8 - 12 or 2 training for homecare. This will go one for 1 more month. Good
    luck to me. I sit all morning for training and am glad when I go to the 
    nursing home to do my PT work as it allows me also to stretch out, crouch,
    squat, lift, walk and run stairs. I shall keep my day job as a PT. Will just
    have a side job as something else.

    The weekend warrior is alive! Leave all my therapist worries behind and time
    to put my warrior/hacker hat on!

================================================================================

Mon Apr  6 21:15:38 EDT 2015

    Read from ycombinator news - Linus interviewed about GIT after 10 years. I
    downloaded the earliest git commit for git itself from: 

    https://www.kernel.org/pub/software/scm/git/


    Downloaded git-0.01.tar.gz and will study this. Easier to download from my
    Mac with Firefox right now but I scp'd it to my BSD machine:

    $ scp git-0.01.tar.gz baloi@192.168.0.13://home/baloi/baloi/

    Now will got through the source code and try compile it in BSD as it did
    not compile with Makefile on my Mac.
    
================================================================================

Sun Mar 29 09:30:40 EDT 2015

    I have decided that using vim-tmux for development might just be the best
    option for me right now rather than learning EMACS. I read something about
    Linus' development habits and he is said to change machines something like
    twice a year, wants a Linux distro that is easy to install and works out of
    the box, has not used Debian (I don't know if he has already today), created
    the kernel but says he might not be any good programming in "user space", 
    uses pine to check email and uses micro emacs only (with his tweaks) to 
    do development.

    This shows that Linus just wants to get to coding most of the time and not
    be bogged down with configuring systems - I had configuration nightmares 
    before that is why I left rails (setting up the libraries even with RVM at
    one time took too much of my time. I am not going to mess with that again.

    This will be the new mantra:
    > go near the computer
    > setup environment in less than 5 minutes (from scratch if everything is
      turned off) less than 1 minute of server is open... 
      Setup should include opening logs, journals, todos
    > CODE, music, code

    That is why this is my new setup:
    > standing "desk" room dresser with big mirror (clean table top)
    > OpenBSD development machine/server sitting at a corner downstairs on a
      standing desk in case I want to code there. (takes up less than 4 feet
      by 4 feet corner space without cluttering the view in the living room.
      The OpenBSD machine is like a sculpture.
    > Macbook Intel (older) plugged in and on the standing desk by room 
      dresser (easy to copy and paste links from this machine), have one
      Firefox browser open and two iTerm windows open (one ssh to BSD and 
      the other open to the local files that I have developed on this machine,
      mostly C now, some Python. 
    > Samsung Alpha phone with Pandora open (Linkin, S.U.N. project, etc) to
      keep the juices flowing. Email (gmail) and youtube accessed only through
      this gadget as it has faster internet, smaller screen (reminding me that
      email and youtube take lower precedence to programming on my Mac which
      has a bigger screen, but now a sometimes choppy internet connection.

    Evertime a coding session is done, I close my Macbook and tuck it in a
    corner, put any book in my bookshelf downstairs, unplug my phone if it is
    charging (tuck charger in its place), and maybe just close the "lid" of
    my BSD machine to put it into hibernate. My BSD machine will always be
    plugged in with a tmux session always open. 

    It is still nice to know that the BSD machine is still my central dev 
    machine which I can carry and charge with a very common Lenovo charger
    which I even have at work. 

    The music as whitenoise works for me too.
   

================================================================================

Mon Mar 23 22:30:39 EDT 2015

    Got the DES encryption with OpenSSL: example in C to run. 
    Code was gladly taken from: 

    http://www.codealias.info/technotes/des_encryption_using_openssl_a_simple_example

    It had this line:

    #include <openssl/des.h>

    The code sample instructions for compilation given was:

    $ gcc test.c -o test -lssl

    I had a bunch of errors after compling as mentioned above. It finally
    compiled with -lcrypto

    $ gcc test.c -o test -lssl -lcrypto

================================================================================

Mon Mar 23 17:44:56 EDT 2015

    Finished work @ 4:11 PM, went home, cooked pre dinner meal for family, 
    listening to Pandora / Linkin Park radio.

    openbsd.txt now has:
    
    baloi@192.168.0.21 

    Can ssh to OpenBSD machine. Cool! Trying to figure out DES encryption from
    GNU C library or OpenBSD/SSL. Trouble compiling BSD, still trying to figure
    this out. 

    already tried:

    $ gcc -Wall -o open_encrypt open_encrypt.c -lssl

    This produces "undefined reference" stuff though. Lots of it...

    Waiting for my encryption book to arrive. I might just end up hard coding
    all of it myself. Hope I have the energy even just to type everything from
    the book. Maybe just DES, which could end up to be a few hundred or k 
    lines.

    SOLVED !! Compile like this:

    $ gcc -Wall -o open_encrypt open_encrypt.c -lssl -lcrypto

    (Need -lcrypto)

================================================================================

Fri Mar 20 07:18:11 EDT 2015

    Need to study this program from antirez (fascinating little programs):

    https://github.com/antirez/linenoise

================================================================================

Wed Mar 18 22:45:35 EDT 2015

    Working and typing on the laptop keyboard from ottomans seem an ok position.
    It remains to be seen. Working out too.

    This will be the new programming setup. Just a laptop or a notebook, a radio
    and nothing else. Not even a calendar. They will all be at least 5 feet
    away. I will have my 8 x 8 feet of space to maneuver. Nothing readable in my
    corner. This works. The only thing that seems to right now. Give me this
    breathing space please.

    Maybe it should not just be close to a wall, but just a blank wall in front
    of you. This works. This definitely works.

================================================================================

Sun Mar 15 19:31:41 EDT 2015

    From Anteriz weblog (http://antirez.com/news/88): 

    "It is a few months that I spend ~ 15-20% of my time, mostly hours stolen to
    nights and weekends, working to a new system...."

    This is an eye opener for me. I am now earning enough money to support my
    family starting to save up for investment. I will invest time to get ready
    when enough money is there to build or nurture something.

    If I work at least 40-50 hours per week, I should have 8-10 hours for my
    side project. 8 hours seems good. 1 hour per day and then 4 hours in the 
    weekends...

    This is my new goal.

================================================================================

Sat Mar 14 07:06:53 EDT 2015

    I figured that using vim and tmux would give me the functionality I needed
    to be able to edit and basically do all other stuff in my laptop or at least
    be a reason not to go into emacs.

================================================================================

Tue Mar 10 21:39:31 EDT 2015

    Installing ports:

    # pkg_add wget
    # cd /usr
    # wget ftp://ftp.openbsd.org/pub/OpenBSD/$(uname -r)/ports.tar.gz

    # tar -zxvf ports.tar.gz

    # cd /usr/ports/sysutils/colorls
    # make install
    
    # vi .profile
    
    export PS1='\u@\h \w # `
    export TERM=wsvt25
    alias ls='usr/local/bin/colorls -G'
    :wq!


================================================================================

Mon Mar  9 23:56:02 EDT 2015

    To have color in the console:
  
    $ export TERM=wsvt25

    This may be added to .profile file. Colors! Sweet

================================================================================

Fri Feb 27 18:29:30 EST 2015

    Just 1 day more than a month after I've had this OpenBSD installation on my
    older Lenovo Thinkpad which I put alongside my oldish "more media" Macbook
    and I have learned a few things. Configured network, install/update driver
    for my wireless USB, have a console-only machine. Fun, fun, fun!


    It seems that the default shell for OpenBSD is the Korn shell /bin/ksh.
    
    The creator of Redis wrote that for the six years of developing Redis, he
    had quite a few side projects himself to keep his "juices flowing". Some-
    thing to break the monotony of one project, one code base. Distractions,
    scratching an itch. This is it.

    Now to figure out ksh....

    Downloaded vividchalk.vim using lynx. Then installed zip and unzip:
    # pkg_add -r zip
    # pkg_add -r unzip


================================================================================

Sun Feb 22 21:13:06 EST 2015

    No long-lasting headache since the 14th of February. Went on a week-long
    vacation 2/16-2/20/15 in Maryland Ocean City Hilton and Edroi's place in
    Frederick Maryland. Slept always by 9 or 10 PM. Ate well and not too often.
    A good vacation, although the new used car's AC had wrecked my airways. Had
    an asthma attack during the whole week, but was semi-manageable.

    Another possible headache cause would be the lack of sleep and the very late
    vigorous exercise.

================================================================================

Sat Feb 14 11:56:26 EST 2015

    I had another long-lasting headache yesterday (Friday). I went to the Y the
    day before and did the heated pool and sauna. I then did my kettlebell cycle
    11:30 - 12 am. I was not able to sleep early. It was also cold that night.
    Still cannot pinpoint the cause of the headache. Waiting for my Odyssey van
    to be ready today hopefully.

================================================================================

Wed Feb 11 23:42:59 EST 2015

    Worked out with kettlebells (basics of snatch - swing, getup, clean, press)
    some long cycle presses then finished with 4 rounds of kettlebell swings
    @35 lbs (30 sec with 60 sec rests). Enough to counter today's sitting at the
    wheel (driving) or so I hope.

    Working out with music helps though (S.U.N. project or similar).

    Workout was done after I finished my notes on Janjan's fast computer - 
    sweet !

================================================================================

Wed Feb 11 06:20:16 EST 2015

    Will work at 6:30 AM at Barnwell then 9 am at Ferncliff, back to Barnwell
    hopefully by 7:30 - 9:00.

    Follow up ( 11:40 PM ):
    * Worked @ 6:45 - 9 AM
      Ferncliff 10:05 - 5:45 PM
      Barnwell   6:45 - 9:00 PM


================================================================================

Tue Feb 10 22:34:27 EST 2015

    A stall on coding and even slowed down on workouts due to 2nd job just 
    started. First week of second job done. Tapering down now. Figured out that
    I just have to start at about 6 am and I must be ok....

    Now for my workout....

================================================================================

Sun Feb  1 18:47:39 EST 2015

    Just about done cooking dinner with Julia. Made re-baked chicken and minced
    cacciatori. We just also came home from YMCA and ALDI. We were waived the 
    fee for membership of $100 and this month is pro-rated at $40, it will be
    $88 next month. We will be able to reimbursed by our Blue Cross insurance.

    At the Y, I first played rebounder for the kids at the basketball court, 
    lifted a few kettlebell presses and did a lunge, pushup, run circuit at the
    track for about 3 rounds. Got me breathing harder. I then finished with the
    hot whirlpool and almost 10 minutes at the sauna. Really hot. Got me sweat-
    ing. Stress relief.

    Superbowl Sunday!

    

================================================================================

Sun Feb  1 09:50:44 EST 2015

    Maybe having python on my OpenBSD machine will be "too much tech". A little
    history of programming languages by year from Wikipedia:

    1968 - Logo
    1969 - B (forerunner to C)
    1970 - Pascal
    1970 - Forth

    1972 - C
    1972 - Smalltalk
    1972 - Prolog

    1973 - ML
    1975 - Scheme
    1978 - SQL

    1980 - C++
    1983 - Ada
    1984 - Common Lisp

    1984 - MATLAB
    1985 - Eiffel
    1986 - Objective-C
    1986 - Erlang
    1987 - Perl

    1988 - Tcl
    1988 - Mathematica
    1989 - FL (Backus)

    Of these, I want be stuck in the 70's when C was relevent and still is 
    today. Maybe a sprinkle of some other tech here and there.

    I keep thinking how 70's and 80's programmers, especially 70's kept the
    coding fire burning. Maybe with good tape recorded music.

    For me now: a headphone and a good playlist at medium loud.


================================================================================

Sun Feb  1 09:37:41 EST 2015

    I am currently using tmux on my OpenBSD terminal to be my "window manager".
    It does not get any sweeter than this. Pure text bliss. Everything is text.
    This is one way of looking at programming also, especially if you work with
    languages like C or Python. Open file, open socket, read file, read bytes
    from stream, write to file, search through lists, arrays, files, etc...

    Text processing in the modern world. 

    I still have my MacBook at my side for music and "eye candy" or to have any
    distraction. Keep distractions on another machine or even a tablet. 
    Internet for my BSD machine will be for git, ssh and scp. Should I remove
    lynx then? Yes, I just did.

        # pkg_delete lynx

================================================================================

Sun Feb  1 01:50:42 EST 2015

    Making wireless usb work:

        Connect to internet and update firmware:
        # fw_update
            // Cool! this updated wpi and urtwn

        Configure network

        # ifconfig urtwn0 scan      // gets the nwid (network id)
        # ifconfig urtwn0 nwid "network-id" wpakey "passkey"
        # dhclient urtwn0           // or dhclient wpi0 if urtwn0 configured as
                                    // above

    Git configure
        Generate ssh key and then copy to Mac
        $ cd .ssh
        $ scp id_rsa.pub user@ip_address://Users/username/directory

        Init repo
        $ git remote add origin git@github.com:baloi/repository_name.git
        $ git push -u origin master

    THIS WORKS!! Will now sleep happily...
      

================================================================================

    Error setting up wifi:

    ERROR:
        failed to load firmware urtwn0 urtwn18192cfwT

    This error came up when trying to do:
        # dhclient urtwn0
    
    But I only found this error in dmesg:

        # dmesg | tail

    That is after I still could not connect to wifi even after all the 
    configuration I tried alread. It got a bit bloody. I had to read the man
    pages which actually was very helpful. A person I worked who used to own an
    ISP and still works with Linux told me to try "ifconfig" and go from there.
    He specifically said to try ifconfig and read the man page. Duh! 

    I am sometimes tempted to read stuff from the internet before referring to
    the man pages so I get bits and pieces of things and sometimes miss the big
    picture.

    Having a barebones machine has enabled me to look at the system and its
    internals more now. I even downloaded the OpenBSD source and tinkered with
    "ed" the line editor's source code. From running make I learned how to 
    compile multiple c files with the "-c" option to first make the object files
    then try something like:

        $ gcc -Wall -o program routines.o another_object.o main.c

    Now to read the gcc man pages....

    Man pages say running gcc with the "-c" option tells gcc not to do linking,
    so the output will be object files output by the assembler.

    Warning: GCC man page spits out a LOT OF STUFF.

    "When you invoke GCC, it normally does preprocessing, compilation, assembly
    and linking. " - man pages for gcc

================================================================================

Sun Feb  1 00:49:21 EST 2015

    Mounting usb stick:
        # sysctl hw.disknames   // to get the name

    Get more info:
        # disklabel sd0

    Mount:
        # mount /dev/sd0a /mnt/sd0


================================================================================

Thu Jan 29 22:26:38 EST 2015

    Working out. Started at 9:50 PM. Stretched hips and shoulders. 2 rounds of
lifts now. Amazon music on. Slowly lowering volume of music and TV. Getting 
pumped also about my coding...

    Main function in main.c of link_list data structure project. Have structure
templates ready with function pointers for possible struct functions...

    I now have to figure out how to test and implement these functions. Then
eventually use this linked list to store some items...

    Eventually did 3 rounds of strengthening exercises....

================================================================================

Thu Jan 29 18:52:55 EST 2015

    Created local git repository for my tinkering with containers in C:

      * Create 'git' user
      * Login as git, make project directory and then initialize directory

        $ mkdir containers.git
        $ cd containers.git
        $ git init --bare

      * Login as your user and clone bare repo

        $ cd ~/working/
        $ git clone git@localhost:/home/baloi/git/containers.git
        $ git add .
        $ git commit -m 'first commit'
        $ git push origin master
 
    UPDATE: This currently works for me!

================================================================================

Wed Jan 28 22:06:34 EST 2015

    After downloading the OpenBSD source code, I checked out the bin directory
and surprised to find directories for the commands like cat, cp, chmod, date,
dd, ln, ls, md5, ps, rm, even ed!

    Go into directory like ed and just issue command:
        
        $ make

    Or it seems we can just compile eachline with:
        
        $ cc -02 -pipe -DBACKWARDS -c filename.c
          ....
          # do for all c files
        $ cc -o program_name 1.o 2.o 3.o

================================================================================

Wed Jan 28 19:01:34 EST 2015

    The kids are still at St. John the Baptist church basketball court for prac-
tice. Julia is sick from too much cold from yesterday's sledding and working 
today at very cold temperatures.
    To download OpenBSD code via cvs:
    
    # cvs -qd anoncvs@anoncvs.ca.openbsd.org:/cvs get -P src

================================================================================

Tue Jan 27 21:59:25 EST 2015

    Standing while reading the book "The Unix Programming Enviroment". Ordered
Kernigan and Ritchie's "The C Programming Language". I want to work on the
samples there. Getting interested in the standard C library functions.


Tue Jan 27 19:24:29 EST 2015

    Finished workout in 40 minutes. Mostly dancing to 3 tunes free from Amazon:
Personal Jesus, Gonna Make You Sweat(Everybody ), The Power (Snap).
    Had a good dinner (shrimp, pork ribs menudo with atay, and pork curry. Also
cleaned some dishes with Janjan. Janjan regularly washes dishes. Bless him.


Tue Jan 27 18:02:14 EST 2015

    I finished work and went to Hannaford with Julia and Kenken. Spent $43 plus
Julia spent $15 on more food from Stewarts. More extra expenses. Good thing we
have something in the bank, but extra stuff has to be tapered starting now. 

    Going to work out in 5 minutes. Planning to do 30-45 minutes. Having a cut-
off for workouts is good so I know how to allot time for the task.
    Going now!

================================================================================

Tue Jan 27 07:41:04 EST 2015

        Installing packages:

        * Connect to LAN
        * # export PKG_PATH=ftp://ftp.openbsd.org/pub/OpenBSD/5.6/packages/i386/
        * # pkg_add vim

        Works!

        Setup global vimrc file:
        
        * # cp /usr/local/share/vim/vim74/vimrc_example.vim /usr/local/share/vimrc

        Install git:
        * # pkg_add git


================================================================================


Mon Jan 26 23:00:09 EST 2015
        
        This will be my log of what I have done with my BSD machine. I just 
installed this from my flash drive by doing the following:

  * downloaded install56.fs the OpenBSD website

  * erased contents of a flash drive using GUI diskutil

  * use command line diskutil to get current list of devices
    $  diskutil list

       // my flash drive was /dev/disk1

  * unmount flash drive
    $ diskutil unmountDisk /dev/disk1

  * wrote install56.fs to disk
    $ sudo dd if=install56.fs of=/dev/rdisk1 bs=1m

        // Note that using /dev/rdiskN instead of /dev/diskN may be faster

  * eject
    $ diskutil eject /dev/disk1

  * restart machine you want to install OpenBSD. Make sure that your flash drive 
is plugged in during boot.

        // Note: 
        //      Installation was easy and added user. Did not connect to the
        //      internet yet. This will be for the second install. gcc was 
        //      installed by default with vi also - makes it good. I just could 
        //      not find the sources yet. Maybe sources are not installed by 
        //      default. Installation took much less than 30 minutes. Felt like 
        //      10 minutes.

        Currently only vi and not vim is installed. No syntax highlighting, no
        auto complete, no expandtab, no retab. Bare bones. No Python even.

        Am I in trouble or what? "!!date command in vi works though for 
        timestamping so I am doing something right.
        
================================================================================
